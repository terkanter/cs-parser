import type { FoundItemMessage, BuyResponseMessage } from "@repo/api-core";
import { prisma } from "@repo/prisma";
import { Bot, type Context, type SessionFlavor, session, InlineKeyboard } from "grammy";
import { env } from "../env";
import { logger } from "../utils/logger";
import { rabbitmqProducer } from "../services/rabbitmq-producer";

interface SessionData {
  step?: string;
}

type BotContext = Context & SessionFlavor<SessionData>;

export class TelegramBot {
  private bot: Bot<BotContext>;

  constructor() {
    this.bot = new Bot<BotContext>(env.TELEGRAM_BOT_TOKEN);
    this.setupMiddleware();
    this.setupCommands();
  }

  private setupMiddleware() {
    // Session middleware
    this.bot.use(
      session({
        initial: (): SessionData => ({}),
      }),
    );
  }

  private setupCommands() {
    // Start command
    this.bot.command("start", async (ctx) => {
      const telegramId = ctx.from?.id.toString();
      if (!telegramId) return;

      await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n" +
          "–Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö CS2.\n\n" +
          "–ö–æ–º–∞–Ω–¥—ã:\n" +
          "/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n" +
          "/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n" +
          "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n" +
          "/help - –ü–æ–º–æ—â—å",
      );
    });

    // Link account command
    this.bot.command("link", async (ctx) => {
      const telegramId = ctx.from?.id.toString();
      if (!telegramId) return;

      try {
        // Check if user already linked
        const existingUser = await prisma.user.findFirst({
          where: { telegramId },
        });

        if (existingUser) {
          await ctx.reply("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!");
          return;
        }

        await ctx.reply(
          `üîó –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n` +
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n" +
            "3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: `" +
            telegramId +
            "`\n" +
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n" +
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!",
          { parse_mode: "Markdown" },
        );
      } catch (error) {
        logger.withError(error).error("Error in link command");
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    });

    // Unlink account command
    this.bot.command("unlink", async (ctx) => {
      const telegramId = ctx.from?.id.toString();
      if (!telegramId) return;

      try {
        const user = await prisma.user.findFirst({
          where: { telegramId },
        });

        if (!user) {
          await ctx.reply("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.");
          return;
        }

        await prisma.user.update({
          where: { id: user.id },
          data: { telegramId: null },
        });

        await ctx.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!");
      } catch (error) {
        logger.withError(error).error("Error in unlink command");
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    });

    // Status command
    this.bot.command("status", async (ctx) => {
      const telegramId = ctx.from?.id.toString();
      if (!telegramId) return;

      try {
        const user = await prisma.user.findFirst({
          where: { telegramId },
        });

        if (!user) {
          await ctx.reply("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.");
          return;
        }

        await ctx.reply(
          `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
            `üë§ –ò–º—è: ${user.name}\n` +
            `üìß Email: ${user.email}\n` +
            `üÜî Telegram ID: ${telegramId}`,
        );
      } catch (error) {
        logger.withError(error).error("Error in status command");
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    });

    // Help command
    this.bot.command("help", async (ctx) => {
      await ctx.reply(
        "ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n" +
          "–ö–æ–º–∞–Ω–¥—ã:\n" +
          "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
          "/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç\n" +
          "/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n" +
          "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏\n" +
          "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" +
          "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º –Ω–∞ –ø–æ–∫—É–ø–∫—É.",
      );
    });

    // Handle callback queries (inline keyboard buttons)
    this.bot.on("callback_query", async (ctx) => {
      const data = ctx.callbackQuery.data;
      
      if (data?.startsWith("buy_")) {
        await this.handleBuyRequest(ctx, data);
      } else {
        await ctx.answerCallbackQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
      }
    });

    // Handle unknown messages
    this.bot.on("message", async (ctx) => {
      await ctx.reply("ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n" + "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
    });
  }

  private async handleBuyRequest(ctx: any, callbackData: string): Promise<void> {
    try {
      // Parse callback data: "buy_{buyRequestId}_{platform}"
      const parts = callbackData.split("_");
      if (parts.length !== 3) {
        await ctx.answerCallbackQuery("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
        return;
      }

      const [, buyRequestId, platform] = parts;
      const telegramId = ctx.from?.id.toString();
      
      if (!telegramId) {
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
        return;
      }

      // Find user by telegram ID
      const user = await prisma.user.findFirst({
        where: { telegramId },
      });

      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω");
        return;
      }

      // Send buy request message to RabbitMQ
      await rabbitmqProducer.publishBuyRequest({
        buyRequestId,
        userId: user.id,
        platform,
        telegramMessageId: ctx.callbackQuery.message?.message_id,
        telegramChatId: ctx.callbackQuery.message?.chat.id.toString(),
      });

      await ctx.answerCallbackQuery("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É...");
      
      logger.withContext({ buyRequestId, userId: user.id, platform }).info("Sent buy request to queue");
    } catch (error) {
      logger.withError(error).error("Error handling buy request");
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  }

  async sendFoundItemNotification(userId: string, message: FoundItemMessage): Promise<void> {
    logger.withContext({ userId });

    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
      });

      if (!user || !user.telegramId) {
        logger.warn(`User ${userId} has no Telegram ID`);
        return;
      }

      const { item } = message;
      const text =
        `üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç!\n\n` +
        `üé≤ Paint Seed: ${item.paintSeed}${item.paintSeedTier ? ` Tier: ${item.paintSeedTier}` : ""}\n\n` +
        `üì¶ ${item.name}\n` +
        `üí∞ –¶–µ–Ω–∞: ${item.price}$\n` +
        `üé® Float: ${item.float}\n` +
        `${item.quality ? `‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: ${item.quality}\n` : ""}` +
        `üîó –•–æ–ª–¥: ${item.unlockAt ? new Date(item.unlockAt).toLocaleString() : "–ù–µ—Ç"}\n\n` +
        `üîó –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${message.platform}`;

      const keyboard = new InlineKeyboard()
        .text("üõí –ö—É–ø–∏—Ç—å", `buy_${message.buyRequestId}_${message.platform}`);

      await this.bot.api.sendMessage(user.telegramId, text, {
        reply_markup: keyboard,
        // parse_mode: "markdown",
        // disable_web_page_preview: true,
      });

      logger.info(`Sent notification to user ${userId}`);
    } catch (error) {
      logger.withError(error).error("Error sending notification");
    }
  }

  async sendBuyResponseNotification(message: BuyResponseMessage): Promise<void> {
    try {
      const user = await prisma.user.findUnique({
        where: { id: message.userId },
      });

      if (!user || !user.telegramId) {
        logger.warn(`User ${message.userId} has no Telegram ID`);
        return;
      }

      const emoji = message.success ? "‚úÖ" : "‚ùå";
      const title = message.success ? "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!" : "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏";
      const text = `${emoji} ${title}\n\n${message.message}`;

      // If we have original message info, try to edit it
      if (message.telegramChatId && message.telegramMessageId) {
        try {
          await this.bot.api.editMessageText(
            message.telegramChatId,
            message.telegramMessageId,
            text
          );
        } catch (editError) {
          // If edit fails, send new message
          logger.withContext({ error: editError }).warn("Failed to edit message, sending new one");
          await this.bot.api.sendMessage(user.telegramId, text);
        }
      } else {
        // Send new message
        await this.bot.api.sendMessage(user.telegramId, text);
      }

      logger.withContext({ 
        userId: message.userId, 
        success: message.success 
      }).info("Sent buy response notification");
    } catch (error) {
      logger.withError(error).error("Error sending buy response notification");
    }
  }

  async start(): Promise<void> {
    logger.info("Starting Telegram bot...");

    this.bot.start();
  }

  async stop(): Promise<void> {
    logger.info("Stopping Telegram bot...");
    await this.bot.stop();
  }

  getBotInstance(): Bot<BotContext> {
    return this.bot;
  }
}

export const telegramBot = new TelegramBot();
