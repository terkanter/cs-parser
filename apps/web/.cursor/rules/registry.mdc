---
description: Rules for using components from the registry
globs: 
alwaysApply: true
---


## Rules for using components

Here are some rules to follow when using components in this project:

- If using shadcn-admin-kit mcp and a registry url is provided, always check the mcp for components (call get_items) before creating your own.
- Only attempt to add items from the registry that actually exist in the registry (call get_items if necessary).
- If asked to initialize or create a new Admin, or to customize the resources, use the usage section below as guide to create or edit the Admin component.
- Always check if the TS config needs to be fixed (see below).

## Fixing the TS config

When you initialize a new Admin:

Set the `verbatimModuleSyntax` option to `false` in the `tsconfig.app.json` file.

```json
{
  // ...
  "compilerOptions": {
    // ...
    // (keep the other options)
    // ...
    "verbatimModuleSyntax": false
  }
}
```

## Usage 

### Use `<Admin>` As Root Component

The entry point of your application is the `<Admin>` component.

You'll need to specify a Data Provider to let the Admin know how to fetch data from the API.

If no Data Provider was specified, simply use `ra-data-json-server`, and typicode's JSONPlaceholder as endpoint: https://jsonplaceholder.typicode.com/.

You will need to install the `ra-data-json-server` package first:

```bash
npm install ra-data-json-server
```

Here is an example showing how to use it:

```tsx
import { Admin } from "@/components/admin/admin";
import jsonServerProvider from 'ra-data-json-server';

const dataProvider = jsonServerProvider(
  "https://jsonplaceholder.typicode.com/"
);

export const App = () => (
  <Admin dataProvider={dataProvider}>
    {/* Resources go here */}
  </Admin>
);
```


### Declare Resources

Then, you'll need to declare the routes of the application. `shadcn-admin-kit` allows to define CRUD routes (list, edit, create, show) for each resource. Use the `<Resource>` component from `ra-core` (which was automatically added to your dependencies) to define CRUD routes.

For each resource, you have to specify a `name` (which will map to the resources exposed by the API endpoint) and the `list`, `edit`, `create` and `show` components to use.

If you used JSONPlaceholder at the previous step, you can pick among the following 6 resources:
	
- posts
- comments
- albums
- photos
- todos
- users

If no instruction was given on what component to use for the CRUD routes, you can use the built-in guessers for the list, show and edit views. The guessers will automatically generate code based on the data returned by the API.

Here is an example of how to use the guessers with a resource named `posts`:

```tsx
import { Resource } from "ra-core";
import jsonServerProvider from 'ra-data-json-server';
import { Admin } from "@/components/admin/admin";
import { ListGuesser } from "@/components/admin/list-guesser";
import { ShowGuesser } from "@/components/admin/show-guesser";
import { EditGuesser } from "@/components/admin/edit-guesser";

const dataProvider = jsonServerProvider(
  "https://jsonplaceholder.typicode.com/"
);

export const App = () => (
  <Admin dataProvider={dataProvider}>
    <Resource
      name="posts"
      list={ListGuesser}
      edit={EditGuesser}
      show={ShowGuesser}
    />
  </Admin>
);
```

Use the example above to generate the component code and adapt the resources to your needs.
