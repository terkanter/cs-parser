generator client {
  provider = "prisma-client-js"
}

generator package {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Platform {
  LIS_SKINS
  CS_MONEY

  @@map("platforms")
}

// Better Auth models
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  telegramId    String?

  buyRequests BuyRequest[]
  platformAccounts PlatformAccount[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Business models

model BuyRequest {
  id        String   @id
  platform  Platform
  query     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUserId String
  createdByUser   User   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@map("buy_requests")
}

model PlatformAccount {
  id        String   @id
  platform  Platform
  credentials Json

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("platform_account")
}